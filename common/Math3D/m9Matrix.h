#ifndef M5_MATRIX_H
#define M5_MATRIX_H
//---------------------------------------------------------------------------

#include "math3d.h"

//---------------------------------------------------------------------------
class m9Matrix {
	//---------------------------------------------------------------------------
public:
	m9Matrix() {}
	m9Matrix(const m9Matrix &m) { *this = m; }
	m3Real & m9Matrix::operator()(int i, int j) {
		assert(i >= 0 && i < 9);
		assert(j >= 0 && i < 9);
		//return rc[i][j];
		return (&r00)[i * 9 + j];
	}
	const m3Real & m9Matrix::operator()(int i, int j) const {
		assert(i >= 0 && i < 9);
		assert(j >= 0 && i < 9);
		//return rc[i][j];
		return (&r00)[i * 9 + j];
	}
	void zero() 
	{
		r00 = 0.0; r01 = 0.0; r02 = 0.0; r03 = 0.0; r04 = 0.0; r05 = 0.0; r06 = 0.0; r07 = 0.0; r08 = 0.0;
		r10 = 0.0; r11 = 0.0; r12 = 0.0; r13 = 0.0; r14 = 0.0; r15 = 0.0; r16 = 0.0; r17 = 0.0; r18 = 0.0;
		r20 = 0.0; r21 = 0.0; r22 = 0.0; r23 = 0.0; r24 = 0.0; r25 = 0.0; r26 = 0.0; r27 = 0.0; r28 = 0.0;
		r30 = 0.0; r31 = 0.0; r32 = 0.0; r33 = 0.0; r34 = 0.0; r35 = 0.0; r36 = 0.0; r37 = 0.0; r38 = 0.0;
		r40 = 0.0; r41 = 0.0; r42 = 0.0; r43 = 0.0; r44 = 0.0; r45 = 0.0; r46 = 0.0; r47 = 0.0; r48 = 0.0;
		r50 = 0.0; r51 = 0.0; r52 = 0.0; r53 = 0.0; r54 = 0.0; r55 = 0.0; r56 = 0.0; r57 = 0.0; r58 = 0.0;
		r60 = 0.0; r61 = 0.0; r62 = 0.0; r63 = 0.0; r64 = 0.0; r65 = 0.0; r66 = 0.0; r67 = 0.0; r68 = 0.0;
		r70 = 0.0; r71 = 0.0; r72 = 0.0; r73 = 0.0; r74 = 0.0; r75 = 0.0; r76 = 0.0; r77 = 0.0; r78 = 0.0;
		r80 = 0.0; r81 = 0.0; r82 = 0.0; r83 = 0.0; r84 = 0.0; r85 = 0.0; r86 = 0.0; r87 = 0.0; r88 = 0.0;
	}
	void id() 
	{
		r00 = 1.0; r01 = 0.0; r02 = 0.0; r03 = 0.0; r04 = 0.0; r05 = 0.0; r06 = 0.0; r07 = 0.0; r08 = 0.0;
		r10 = 0.0; r11 = 1.0; r12 = 0.0; r13 = 0.0; r14 = 0.0; r15 = 0.0; r16 = 0.0; r17 = 0.0; r18 = 0.0;
		r20 = 0.0; r21 = 0.0; r22 = 1.0; r23 = 0.0; r24 = 0.0; r25 = 0.0; r26 = 0.0; r27 = 0.0; r28 = 0.0;
		r30 = 0.0; r31 = 0.0; r32 = 0.0; r33 = 1.0; r34 = 0.0; r35 = 0.0; r36 = 0.0; r37 = 0.0; r38 = 0.0;
		r40 = 0.0; r41 = 0.0; r42 = 0.0; r43 = 0.0; r44 = 1.0; r45 = 0.0; r46 = 0.0; r47 = 0.0; r48 = 0.0;
		r50 = 0.0; r51 = 0.0; r52 = 0.0; r53 = 0.0; r54 = 0.0; r55 = 1.0; r56 = 0.0; r57 = 0.0; r58 = 0.0;
		r60 = 0.0; r61 = 0.0; r62 = 0.0; r63 = 0.0; r64 = 0.0; r65 = 0.0; r66 = 1.0; r67 = 0.0; r68 = 0.0;
		r70 = 0.0; r71 = 0.0; r72 = 0.0; r73 = 0.0; r74 = 0.0; r75 = 0.0; r76 = 0.0; r77 = 1.0; r78 = 0.0;
		r80 = 0.0; r81 = 0.0; r82 = 0.0; r83 = 0.0; r84 = 0.0; r85 = 0.0; r86 = 0.0; r87 = 0.0; r88 = 1.0;
	}
	static void jacobiRotate(m9Matrix &A, m9Matrix &R, int p, int q);
	static void eigenDecomposition(m9Matrix &A, m9Matrix &R);
	void invert();

	// --------------------------------------------------

	m3Real rc[9][9];

	m3Real r00, r01, r02, r03, r04, r05, r06, r07, r08;
	m3Real r10, r11, r12, r13, r14, r15, r16, r17, r18;
	m3Real r20, r21, r22, r23, r24, r25, r26, r27, r28;
	m3Real r30, r31, r32, r33, r34, r35, r36, r37, r38;
	m3Real r40, r41, r42, r43, r44, r45, r46, r47, r48;
	m3Real r50, r51, r52, r53, r54, r55, r56, r57, r58;
	m3Real r60, r61, r62, r63, r64, r65, r66, r67, r68;
	m3Real r70, r71, r72, r73, r74, r75, r76, r77, r78;
	m3Real r80, r81, r82, r83, r84, r85, r86, r87, r88;
};


#endif
